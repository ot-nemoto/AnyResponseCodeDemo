openapi: "3.0.1"
info:
  title: AnyResponseCodeDemo
  version: "1.0"
paths:
  /:
    get:
      parameters:
      - name: expect_code
        in: query
        schema:
          type: string
      responses:
        200:
          description: 200 response
          content: {}
        400:
          description: 400 response
          content: {}
        401:
          description: 401 response
          content: {}
        403:
          description: 403 response
          content: {}
        500:
          description: 500 response
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AnyResponseCodeDemoFunction.Arn}/invocations
        responses:
          default:
            statusCode: "200"
          Bad Request:
            statusCode: "400"
            responseTemplates:
              application/json: |
                {
                  "message": "$input.path('errorMessage')"
                }
          Unauthorixed:
            statusCode: "401"
            responseTemplates:
              application/json: |
                {
                  "message": "$input.path('errorMessage')"
                }
          あなたにはアクセス権がありません:
            statusCode: "403"
            responseTemplates:
              application/json: |
                {
                  "message": "$input.path('errorMessage')"
                }
          Internal Server Error:
            statusCode: "500"
            responseTemplates:
              application/json: |
                {
                  "message": "$input.path('errorMessage')"
                }
        passthroughBehavior: WHEN_NO_TEMPLATES
        httpMethod: POST
        requestTemplates:
          application/json: |
            #set($allParams = $input.params())
            {
              "queryStringParameters" : {
                #set($params = $allParams.get('querystring'))
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                  #if($foreach.hasNext),#end
                #end
              }
            }
        type: aws
